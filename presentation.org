#+Title: Back to the future: Cljs
#+Author: Konrad KÃ¼hne & Christian Weilbach
#+Email: ch_weil@topiq.es

#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_Links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_slide_number:t
# +OPTIONS: reveal_width:1420 reveal_height:1080
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.6
#+REVEAL_MAX_SCALE: 1.2
#+REVEAL_TRANS: linear
#+REVEAL_THEME: sky
#+REVEAL_HLEVEL: 1


* About us
  - professional frontend (app and web) and backend (JVM) developers with
    LivelyCode
  - core devs of /isomorphic/ http://replikativ.io
  - regular experience with JavaScript
  - introduction to FP with underscore.js and JSON data flow from web services
  - functional programming zealots
  - pragmatic: Making /more/ money with /less/ work now.
    


* Why?
  [[./hickey_meme.jpg]]

* Language design
  - LISP was invented/discovered in *1958*
  - Brandon Eich's design objective: Java-like script language
  - Time to design: *2 weeks !!!!*
  - $\Rightarrow$ Some JavaScript core language problems: http://destroyallsoftware.com/talks/wat
  - comparison design effort JavaScript vs. Clojure: \\
    *2 weeks* vs. *2 years*
  - not to speak of all the history in Lisp language design which has since been
    ported to Clojure (for example MetaObject protocol as the "best" OO
    approach)
    
    

* The original JavaScript
#+BEGIN_NOTES
  - JavaScript can be a *nice* language ("JavaScript the Good Parts")
#+END_NOTES
  - Lisp (Scheme dialect) was intended as the /original/ JavaScript, before Java
    became so popular
  - JS similar to imperative Lisps like Emacs-Lisp
  - *composition*: dynamic extension of small core language, like Scheme
  - Dynamic languages (e.g. Python, Ruby, JavaScript) subset of features of
    Lisp: [[http://paulgraham.com/hundred.html][The hundred year language]]. Paul Graham.
    

* Language limitations
  [[./callback-hell.jpg]]
    

* List Processing
  - "Most important idea in Computer Science." Alan Kay
  - *Remove as much syntax as possible*
  - *interpreter of itself* can be expressed on half a page, (chapter 4 of SICP)
  - All code is simplest data structure: List (homoiconic)
  - adapt language to problem \\
    $\Rightarrow$ *Lisp Macros*: Languages as libraries
    * *go-lang* as core.async: *no callback hell*
    * *prolog* as core.logic: *relational programming*
    * *statistics* as anglican: *probabilistic programming*
    * *TypeScript* as with core.typed: *gradual typing*
    * *OCaml style pattern matching* as core.match: *terse control flow*
      ...
 
      
* Functional programming
  - not just /first class/ functions (closures)
  - but *pure* functions: functions that do not mutate their parameters or the
    environment, but just return a value
  - *value semantics*: true equality
  - Bret Victor about Haskell: "Language for 21st century."
    
* Functional programming in JS
  - JavaScript core datastructures (JSON) are mutable \\
    $\Rightarrow$ no /real/ equality, parameters mutated by functions
  - FP theoretically possible, but practically impossible on top of imperative
    programming
  - JS libraries do not support FP in general
  - current trend with TypeScript / EcmaScript class syntax rather in /imperative
    object-oriented/ direction like Java


* ClojureScript and Clojure
  - Clojure is a Lisp dialect for the JVM
  - *persistent datastructures* for FP
  - ClojureScript is a port of Clojure to JavaScript
  - both are /hosted languages/, exposing host primitives and abstractions instead
    of introducing their own: ClojureScript $\neq$ Clojure
  - Clojure brings live coding and strong concurrent programming to the JVM and
    CLR
  - Clojure and ClojureScript can be very nicely integrated, e.g. replikativ



* Relax
  [[./clojure_code_survival.jpeg]]
    
* Cljs ðŸ’˜ JS
  - First class interop:
    * *All primitives* are JavaScript primitives
    * all ClojureScript functions are *normal JavaScript functions*
    * data structures can be easily converted from and to JSON
    * No overhead for large standard library or your code thanks to heavily optimizing
      *Google Closure compiler* (used for GMail, ...)
  - ClojureScript with functional programming strengthens the core value of
    JavaScript: *Interactivity* and *Live Coding*
    
  
  
* Live Coding
  - redux, immutable: react state management /inspired by/ [[https://github.com/omcljs/om/][Om]]
  - React through [[http://www.material-ui.com/][material-ui]]

* References
  - Source code and presentation: https://github.com/replikativ/chat42
  - [[https://github.com/boston-clojure/learning-clojure][Boston Clojure - learning resources]]
  - [[https://github.com/bhauman/lein-figwheel/wiki/Quick-Start][Figwheel Quick Start]] (look at the FlappyBird Demo ;) )
  - [[https://www.railslove.com/stories/my-way-into-clojure-building-a-card-game-with-om-part-1][Background to Cljs webdev]]
  - [[https://github.com/clojure/clojurescript/wiki/Companies-Using-ClojureScript][Some company web sites using cljs]]: Capital One, CircleCI, Cisco, Rackspace,
    Thomson Reuters, ...
  - [[http://clojure.org/community/companies][Many more use Clojure now]]: Facebook, Deutsche Bank, Daily Mail, Heroku,
    Netflix, Oracle, Salesforce, SoundCloud, Walmart Labs, ...
  - [[http://cljsrn.org/][ClojureScript + React Native]] 
